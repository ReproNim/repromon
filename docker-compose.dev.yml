services:
  web:
    build:
      dockerfile: Dockerfile
      ## Old docker-compose asked for context but this was still insufficient
      ## since it could then "link" the built image here to be used for the worker
      # context: .
    image: repromon:dev
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "9095:9095"
    networks:
      - internal
        #- external
#    environment: &env
#      FLASK_APP: "datalad_registry:create_app"
#
#      # db service access info
#      SQLALCHEMY_DATABASE_URI: "${SQLALCHEMY_DATABASE_URI}"
    command: [ "/app/venv/bin/poetry", "run", "srv" ]
    volumes:
      - ${WEB_PATH_AT_HOST}/instance:/app/instance

  db:
    image: docker.io/postgres:latest
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_INITDB_ARGS: --encoding utf8 --locale C
    ports:
      - "5433:5432"
    networks:
      - internal
    command: -p 5433
    userns_mode: "keep-id"  # This has an effect only after podman-compose 1.0.3 possibly
      # See https://github.com/containers/podman-compose/issues/166
      # for details.
      # For podman-compose 1.0.3 or earlier, use
      # `PODMAN_USERNS=keep-id podman-compose up`
    volumes:
      - ${DB_PATH_AT_HOST}/data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 1m

networks:
  internal:
    #external:
    #external: true
